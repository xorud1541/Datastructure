#define _AFXDLL
#include<afx.h>
#include<cstdlib>
#include<cmath>
#include<cstringt.h>
#include<cstring>
#include<string>
#include<string.h>
#include<io.h>
#include<iostream>
#include<string>
#include<fstream>
#include<stdio.h>
#include<vector>
#include<utility>
#include<direct.h>
#include<opencv2/core/core.hpp>
#include<opencv/cv.h>
#include<opencv/highgui.h>
#include<opencv2\opencv.hpp>
#include"MalwareVisual.h"

#define MAX_PATH           1000
using namespace std;
using namespace cv;
using namespace mylib;

namespace mylib {

	StringParser::StringParser() {

	}
	StringParser::~StringParser() {

	}

	int64_t StringParser::Tokenize(std::vector<std::string> *dest, std::string const &src, std::string const delimiters) {
		std::vector<std::string> &tokens = *dest;
		std::wstring::size_type start = src.find_first_not_of(delimiters, 0);
		std::wstring::size_type end = src.find_first_of(delimiters, start);

		while (std::wstring::npos != end || std::wstring::npos != start)
		{
			tokens.push_back(src.substr(start, end - start));
			start = src.find_first_not_of(delimiters, end);
			end = src.find_first_of(delimiters, start);
		}

		return tokens.size();
	}
}

void SaveImage(std::string path, std::string fileName) {
	try{
		char SaveFileName[MAX_PATH];
		std::ifstream istream(path);
		std::string str;
		vector<string> vec;
		StringParser paser;
		int decimal[16];
		int cnt = 1;

		Mat img;
		img.create(256, 256, CV_8UC1);

		cout << fileName << endl;
		if(!istream.is_open())
		{
			puts("Working....");
			return;
		} 
		
		else 
		{
			while(!istream.eof()){
				getline(istream, str);
				if(str.empty()) break;
				//str -> tokens
				paser.Tokenize(&vec, str, " "); 
				//숫자로 바꾸고 10진수로 바꾸고
				str = "\0";
				for(int i=0; i<vec.size(); i++) {
					decimal[i] = (int)strtol(vec.at(i).c_str(), NULL, 16);
				}
				for(int i=0; i<vec.size()-1; i++) {
					if((0 <= decimal[i] <= 255) && (0 <= decimal[i+1] <= 255)) {
						img.at<uchar>(decimal[i], decimal[i+1]) += 1; 
					} else {
						continue;
					}
				}// for done
				vec.clear();
			}// while done
		}//else done

		for(int i=0; i<256; i++) {
			for(int j=0; j<256; j++) {
				img.at<uchar>(i,j) = 255-img.at<uchar>(i,j);
			}
		}
		sprintf(SaveFileName, "%s.png", fileName.c_str());
		imwrite(SaveFileName, img);
		istream.close();
		img.release();
	}//Try end
	catch(...) 
	{
		std::ofstream ostream("imageCatch.txt",ios::app);
		ostream	<< fileName << endl;	
		printf("Error!\n");
		ostream.close();
		return;
	}
}

int main(void)
{
	_finddata_t fd;
	long handle;
	int result = 1;

	handle = _findfirst("D:\MalwareDataset\\*.*", &fd);
	if(handle == -1)
	{
		puts("there is no files.");
		return 0;
	}

	while(result != -1)
	{
		std::string path = "D:\MalwareDataset\\";
		std::string lowpath;
		std::string fileName;
		fileName = fd.name;
		lowpath = path + fileName;
		SaveImage(lowpath, fileName);
		result = _findnext(handle, &fd);
	}

	_findclose(handle);
	std::cout<<"Work Finished!!"<<std::endl;

	return 0;
}